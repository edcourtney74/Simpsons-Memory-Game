{"version":3,"sources":["components/SimpsonsCard/index.js","components/Sidebar/index.js","components/Wrapper/index.js","App.js","serviceWorker.js","index.js"],"names":["SimpsonsCard","props","react_default","a","createElement","className","alt","name","src","image","onClick","gameplay","id","clicked","Sidebar","message","score","highScore","Wrapper","children","App","state","simpsons","gameReset","_this","map","character","Object","objectSpread","shuffle","setState","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","_this2","this","console","log","components_Wrapper","components_Sidebar","components_SimpsonsCard","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9cba031c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\n// Function to display Simpson Cards info\r\nfunction SimpsonsCard(props) {\r\n    return ( \r\n        <div className=\"col-4 col-md-2 card my-1 p-2\">\r\n            <img alt={props.name} src={props.image} onClick={() => props.gameplay(props.id, props.clicked)}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SimpsonsCard;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\n// Function to return Sidebar info\r\nfunction Sidebar(props) {\r\n    return ( \r\n        <div className=\"col-md-2 mt-3 pl-1\">\r\n            {/* Instructions section */}\r\n            <h4>Simpsons Memory Game</h4>\r\n            <p>Click on each one of the characters without repeating. See if you can get all 12 in a row.</p>\r\n            \r\n            {/* Area to display result of previous pick */}\r\n            <h5 className=\"text-center\">{props.message}</h5>\r\n\r\n            {/* Area to show updated score */}\r\n            <h5 className=\"mt-4 text-center\">Your score</h5>\r\n            <h4 className=\"text-center\">{props.score}</h4>\r\n            \r\n            {/* Area to show the user's highest score so far */}\r\n            <h5 className=\"mt-4 text-center\">High score</h5>\r\n            <h4 className=\"text-center\">{props.highScore}</h4>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sidebar;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\n// Wrapper creates the container for the game board\r\nfunction Wrapper(props) {\r\n    return (\r\n        <div className=\"container my-5\">\r\n            <div className=\"row mx-1\">{props.children}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Wrapper;","import React, { Component } from 'react';\nimport './App.css';\nimport SimpsonsCard from \"./components/SimpsonsCard\";\nimport Sidebar from \"./components/Sidebar\"\nimport Wrapper from \"./components/Wrapper\"\nimport simpsons from \"./simpsons.json\";\n\nclass App extends Component {\n  // Setting state to simpsons json array, score and message\n  state = {\n    simpsons,\n    score: 0,\n    message: \"\",\n    highScore: 0\n  };\n\n  // Function for resetting the game\n  gameReset = () => {\n    // Use .map to reset all the characters' clicked value to false\n    const simpsons = this.state.simpsons.map(character => {\n      return {\n        ...character,\n        clicked: false\n      }\n    })\n\n    // Shuffle the array to start\n    this.shuffle(simpsons);\n\n    // Set the state with the reset array and reset score to 0\n    this.setState({\n      simpsons,\n      score: 0,\n    })\n  }\n\n  // Function to shuffle the characters, based on the Fisher-Yates Shuffle\n  shuffle = array => {\n    var currentIndex = array.length, temporaryValue, randomIndex;\n  \n    // Check to see if elements remain to be shuffled\n    while (0 !== currentIndex) {\n  \n      // Pick a remaining element at random, then reduce currentIndex by 1\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n  \n      // Swap the randomly chosen element with the current element.\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }  \n    return array;\n  }  \n  \n  // Function for the gameplay that passes in the clicked character's id and clicked value\n  gameplay = (id, clicked) => {\n    // If the clicked value is false...\n    if (!clicked) {\n      // If the user's score is 12, the game is won\n      if (this.state.score + 1 === 12) {\n        // Set state to show \"You won! message\"\n        this.setState({\n          message: \"You won! Try to duplicate your feat by picking another character.\",\n          highScore: 12\n        })\n        // Call resetGame function to reset game\n        this.gameReset();\n\n        // If the score is less than 11, continue with the game\n      } else {\n        // Use .map to create a new simpsons array and change the selected character's clicked value to true  \n        const simpsons = this.state.simpsons.map(character => {\n          if (id === character.id) {\n            // If id from click equals character id, change clicked to true and keep all other info the same\n            return {\n              ...character,\n              clicked: true\n            }\n            // If character doesn't equal click, keep all info the same\n          } else {\n            return { ...character }\n          }\n        })\n\n        // Shuffle the new simpsons array\n        this.shuffle(simpsons);\n\n        // Set the state with the new shuffled array and update score and message\n        this.setState({\n          simpsons,\n          score: this.state.score + 1,\n          message: \"Correct!\"\n        })\n      }\n    \n    // If the clicked value is true, the game is over\n    } else {\n        // Set state to display loss message\n        this.setState({\n        message: \"Sorry, you lost. Try again by picking a new character.\",\n        highScore: this.state.score\n        })\n        // Call gameReset function to start a new game\n        this.gameReset();\n    }\n  }\n\n  render() {\n    console.log(this.state.simpsons);\n    return (\n      <div>\n        <Wrapper>       \n        <Sidebar\n          score={this.state.score}\n          message={this.state.message}\n          highScore={this.state.highScore}\n        ></Sidebar>\n        <div className=\"col-md-10 my-3\">\n          <div className=\"row\">\n            {this.state.simpsons.map(character => (\n              <SimpsonsCard\n                gameplay={this.gameplay}\n                id={character.id}\n                key={character.id}\n                name={character.name}\n                image={character.image}\n                clicked={character.clicked}\n              />\n            ))}\n          </div>\n        </div>\n      </Wrapper>\n    </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}